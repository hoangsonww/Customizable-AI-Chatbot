"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

/**
 * This file is autogenerated by Shadcn. It contains the Tooltip component
 * which is a styled tooltip using Radix UI's TooltipPrimitive.
 *
 * @file components/ui/tooltip.tsx
 * @author Son Nguyen
 * @license MIT
 * @version 1.0.0
 * @date 2025-05-11
 */

/**
 * Tooltip component using Radix UI's TooltipPrimitive.
 * This component provides a tooltip that can be used to display additional information
 * when hovering over an element.
 *
 * @param {React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>} props - The props for the tooltip content.
 * @param {React.Ref} ref - The ref for the tooltip content.
 * @returns {JSX.Element} The TooltipContent component.
 */
const TooltipProvider = TooltipPrimitive.Provider;

/**
 * Tooltip component using Radix UI's TooltipPrimitive.
 * This component provides a tooltip that can be used to display additional information
 * when hovering over an element.
 *
 * @param {React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>} props - The props for the tooltip.
 * @returns {JSX.Element} The Tooltip component.
 */
const Tooltip = TooltipPrimitive.Root;

/**
 * TooltipTrigger component using Radix UI's TooltipPrimitive.
 * This component is used to trigger the tooltip when hovering over an element.
 *
 * @param {React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Trigger>} props - The props for the tooltip trigger.
 * @returns {JSX.Element} The TooltipTrigger component.
 */
const TooltipTrigger = TooltipPrimitive.Trigger;

/**
 * TooltipContent component using Radix UI's TooltipPrimitive.
 * This component is used to display the content of the tooltip.
 *
 * @param {React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>} props - The props for the tooltip content.
 * @param {React.Ref} ref - The ref for the tooltip content.
 * @returns {JSX.Element} The TooltipContent component.
 */
const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
